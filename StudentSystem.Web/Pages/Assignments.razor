@page "/assignments"
@using StudentSystem.Domain.Entities
@using StudentSystem.Web.Services
@inject AssignmentApiService AssignmentService
@inject NavigationManager Navigation

<PageTitle>Student Class Assignments</PageTitle>

<div class="d-flex justify-content-evenly align-items-center mb-3">
    <h1>Student Class Assignments</h1>
    <div>
        @if (selectedAssignments.Any())
        {
            <button class="btn btn-primary me-2" @onclick="ShowBulkUpdatePanel">
                <span class="oi oi-check"></span> Bulk Update (@selectedAssignments.Count selected)
            </button>
        }
        <a href="/assignments/create" class="btn btn-success">
            <span class="oi oi-plus"></span> Create Assignment
    </a>
    </div>
</div>

@if (showBulkPanel && selectedAssignments.Any())
{
    <div class="card mb-3 border-primary">
        <div class="card-header bg-primary text-white">
            <h5>Bulk Update - @selectedAssignments.Count Assignment(s) Selected</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <div class="d-flex justify-content-evenly align-items-center mb-2">
                        <strong>Offer Sent:</strong>
                        <button class="btn btn-sm btn-success" @onclick="BulkUpdateOfferSent" disabled="@bulkUpdating">
                            Set to Yes
                        </button>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="d-flex justify-content-evenly align-items-center mb-2">
                        <strong>Offer Signed:</strong>
                        <button class="btn btn-sm btn-success" @onclick="BulkUpdateOfferSigned" disabled="@bulkUpdating">
                            Set to Yes
                        </button>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="d-flex justify-content-evenly align-items-center mb-2">
                        <strong>SSN Sent:</strong>
                        <button class="btn btn-sm btn-success" @onclick="BulkUpdateSSNSent" disabled="@bulkUpdating">
                            Set to Yes
                        </button>
                    </div>
                </div>
            </div>

            @if (bulkUpdating)
            {
                <div class="mt-2">
                    <div class="spinner-border spinner-border-sm" role="status"></div>
                    Updating @selectedAssignments.Count assignment(s)...
                </div>
            }

            @if (!string.IsNullOrWhiteSpace(bulkUpdateMessage))
            {
                <div class="alert @(bulkUpdateSuccess ? "alert-success" : "alert-danger") mt-2">
                    @bulkUpdateMessage
                </div>
            }

            <div class="mt-3">
                <button class="btn btn-secondary btn-sm" @onclick="ClearSelection">
                    Clear Selection
                </button>
            </div>
        </div>
    </div>
}

<div class="search-box mb-3">
    <div class="row">
        <div class="col-md-4">
            <input type="text" class="form-control" placeholder="Search by student, class, or instructor..."
                   @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterAssignments" />
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="selectedPosition" @bind:after="FilterAssignments">
                <option value="">All Positions</option>
                @foreach (var position in uniquePositions)
                {
                    <option value="@position">@position</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="selectedTerm" @bind:after="FilterByTerm">
                <option value="">All Terms</option>
                @foreach (var term in uniqueTerms)
                {
                    <option value="@term">@term</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary w-100" @onclick="LoadAssignments">
                <span class="oi oi-reload"></span> Refresh
            </button>
        </div>
    </div>
</div>

@if (loading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading assignments...</p>
    </div>
}
else if (filteredAssignments == null || !filteredAssignments.Any())
{
    <div class="alert alert-info">
        <strong>No assignments found.</strong> Try a different search term or filter.
    </div>
}
else
{
    <div class="alert alert-success">
        <strong>Showing @filteredAssignments.Count of @allAssignments.Count assignments</strong>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-hover table-sm">
            <thead class="table-dark">
                <tr>
                    <th style="width: 40px;">
                        <input type="checkbox" class="form-check-input"
                               @onchange="ToggleSelectAll"
                               checked="@(selectedAssignments.Count == filteredAssignments.Count && filteredAssignments.Any())" />
                    </th>
                    <th>Student</th>
                    <th>Position</th>
                    <th>Class</th>
                    <th>Instructor</th>
                    <th>Hours/Week</th>
                    <th>Compensation</th>
                    <th>Term</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var assignment in filteredAssignments)
                {
                    <tr>
                        <td>
                            <input type="checkbox" class="form-check-input"
                                   @onchange="() => ToggleSelection(assignment.Id)"
                                   checked="@selectedAssignments.Contains(assignment.Id)" />
                        </td>
                        <td>
                            <strong>@assignment.First_Name @assignment.Last_Name</strong>
                            <br />
                            <small class="text-muted">@assignment.ASUrite</small>
                        </td>
                        <td>
                            <span class="badge bg-primary">@assignment.Position</span>
                            @if (!string.IsNullOrWhiteSpace(assignment.FultonFellow) && assignment.FultonFellow == "Yes")
                            {
                                <br /><span class="badge bg-warning text-dark">Fulton Fellow</span>
                            }
                        </td>
                        <td>
                            <strong>@assignment.Subject @assignment.CatalogNum</strong>
                            <br />
                            <small>Class #: @assignment.ClassNum</small>
                        </td>
                        <td>@assignment.InstructorFirstName @assignment.InstructorLastName</td>
                        <td>@assignment.WeeklyHours hrs</td>
                        <td><strong>$@assignment.Compensation.ToString("N2")</strong></td>
                        <td>@assignment.Term</td>
                        <td>
                            @if (assignment.Offer_Signed == true && assignment.Offer_Sent == true && assignment.SSN_Sent == true)
                            {
                                <span class="badge bg-success">Signed</span>
                            }
                            else if (assignment.Offer_Sent == true)
                            {
                                <span class="badge bg-info">Offer Sent</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Pending</span>
                            }
                            <br />
                            @if (assignment.SSN_Sent == true)
                            {
                                <small><span class="badge bg-success">SSN ✓</span></small>
                            }
                            @if (assignment.Offer_Signed == true)
                            {
                                <small><span class="badge bg-success">Offer ✓</span></small>
                            }
                        </td>
                        <td>
                            <button class="btn btn-sm btn-info" @onclick="() => ViewDetails(assignment.Id)">
                                <span class="oi oi-eye"></span> View
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="mt-3">
        <div class="row">
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h6>Total Assignments</h6>
                        <h3>@allAssignments.Count</h3>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h6>Unique Students</h6>
                        <h3>@allAssignments.Select(a => a.Student_ID).Distinct().Count()</h3>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h6>Signed Offers</h6>
                        <h3>@allAssignments.Count(a => a.Offer_Signed == true)</h3>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h6>Total Compensation</h6>
                        <h3>$@allAssignments.Sum(a => a.Compensation).ToString("N0")</h3>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<StudentClassAssignment> allAssignments = new();
    private List<StudentClassAssignment> filteredAssignments = new();
    private List<string> uniquePositions = new();
    private List<string> uniqueTerms = new();
    private string searchTerm = string.Empty;
    private string selectedPosition = string.Empty;
    private string selectedTerm = string.Empty;
    private bool loading = true;

    // Bulk update fields
    private HashSet<int> selectedAssignments = new();
    private bool showBulkPanel = false;
    private bool bulkUpdating = false;
    private string? bulkUpdateMessage;
    private bool bulkUpdateSuccess;

    protected override async Task OnInitializedAsync()
    {
        await LoadAssignments();
    }

    private async Task LoadAssignments()
    {
        loading = true;
        allAssignments = await AssignmentService.GetAllAssignmentsAsync();

        // Get unique values for filters
        uniquePositions = allAssignments.Where(a => !string.IsNullOrWhiteSpace(a.Position))
            .Select(a => a.Position!).Distinct().OrderBy(p => p).ToList();
        uniqueTerms = allAssignments.Select(a => a.Term).Distinct().OrderBy(t => t).ToList();

        filteredAssignments = allAssignments;
        loading = false;
    }

    private void FilterAssignments()
    {
        filteredAssignments = allAssignments.Where(a =>
            (string.IsNullOrWhiteSpace(searchTerm) ||
             (a.First_Name != null && a.First_Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
             (a.Last_Name != null && a.Last_Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
             (a.ASUrite != null && a.ASUrite.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
             (a.Subject != null && a.Subject.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
             (a.ClassNum != null && a.ClassNum.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
             (a.InstructorFirstName != null && a.InstructorFirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
             (a.InstructorLastName != null && a.InstructorLastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))) &&
            (string.IsNullOrWhiteSpace(selectedPosition) || a.Position == selectedPosition) &&
            (string.IsNullOrWhiteSpace(selectedTerm) || a.Term == selectedTerm)
        ).ToList();
    }

    private async Task FilterByTerm()
    {
        if (!string.IsNullOrWhiteSpace(selectedTerm))
        {
            loading = true;
            filteredAssignments = await AssignmentService.GetAssignmentsByTermAsync(selectedTerm);
            loading = false;
        }
        else
        {
            FilterAssignments();
        }
    }

    private void ViewDetails(int assignmentId)
    {
        Navigation.NavigateTo($"/assignments/{assignmentId}");
    }

    private void ToggleSelection(int assignmentId)
    {
        if (selectedAssignments.Contains(assignmentId))
        {
            selectedAssignments.Remove(assignmentId);
        }
        else
        {
            selectedAssignments.Add(assignmentId);
        }

        if (!selectedAssignments.Any())
        {
            showBulkPanel = false;
        }
    }

    private void ToggleSelectAll()
    {
        if (selectedAssignments.Count == filteredAssignments.Count)
        {
            selectedAssignments.Clear();
            showBulkPanel = false;
        }
        else
        {
            selectedAssignments.Clear();
            foreach (var assignment in filteredAssignments)
            {
                selectedAssignments.Add(assignment.Id);
            }
        }
    }

    private void ShowBulkUpdatePanel()
    {
        showBulkPanel = !showBulkPanel;
        bulkUpdateMessage = null;
    }

    private void ClearSelection()
    {
        selectedAssignments.Clear();
        showBulkPanel = false;
        bulkUpdateMessage = null;
    }

    private async Task BulkUpdateOfferSent()
    {
        await BulkUpdateField("OfferSent", true);
    }

    private async Task BulkUpdateOfferSigned()
    {
        await BulkUpdateField("OfferSigned", true);
    }

    private async Task BulkUpdateSSNSent()
    {
        await BulkUpdateField("SSNSent", true);
    }

    private async Task BulkUpdateField(string fieldName, bool value)
    {
        bulkUpdating = true;
        bulkUpdateMessage = null;

        try
        {
            var assignmentsToUpdate = allAssignments
                .Where(a => selectedAssignments.Contains(a.Id))
                .ToList();

            int successCount = 0;
            int failureCount = 0;

            foreach (var assignment in assignmentsToUpdate)
            {
                // Update the appropriate field
                switch (fieldName)
                {
                    case "OfferSent":
                        assignment.Offer_Sent = value;
                        break;
                    case "OfferSigned":
                        assignment.Offer_Signed = value;
                        break;
                    case "SSNSent":
                        assignment.SSN_Sent = value;
                        break;
                }

                var success = await AssignmentService.UpdateAssignmentAsync(assignment.Id, assignment);
                if (success)
                {
                    successCount++;
                }
                else
                {
                    failureCount++;
                }
            }

            if (failureCount == 0)
            {
                bulkUpdateMessage = $"Successfully updated {successCount} assignment(s)!";
                bulkUpdateSuccess = true;
            }
            else
            {
                bulkUpdateMessage = $"Updated {successCount} assignment(s), {failureCount} failed.";
                bulkUpdateSuccess = false;
            }

            // Refresh the assignments list to show updated values
            await LoadAssignments();
            FilterAssignments();
        }
        catch (Exception ex)
        {
            bulkUpdateMessage = $"Error: {ex.Message}";
            bulkUpdateSuccess = false;
        }
        finally
        {
            bulkUpdating = false;

            // Clear message after 3 seconds
            await Task.Delay(3000);
            bulkUpdateMessage = null;
        }
    }
}
