@page "/students"
@using StudentSystem.Domain.Entities
@using StudentSystem.Web.Services
@inject StudentApiService StudentService
@inject NavigationManager Navigation

<PageTitle>Students</PageTitle>

<h1>Student Directory</h1>

<div class="search-box mb-3">
    <div class="row">
        <div class="col-md-6">
            <input type="text" class="form-control" placeholder="Search students..."
                   @bind="searchTerm" @bind:event="oninput" @onkeyup="SearchStudents" />
        </div>
        <div class="col-md-3">
            <button class="btn btn-primary" @onclick="LoadStudents">
                <span class="oi oi-reload"></span> Refresh
            </button>
        </div>
    </div>
</div>

@if (loading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading students...</p>
    </div>
}
else if (students == null || !students.Any())
{
    <div class="alert alert-info">
        <strong>No students found.</strong> Try a different search term or check your API connection.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Student ID</th>
                    <th>Name</th>
                    <th>ASUrite</th>
                    <th>Email</th>
                    <th>Program</th>
                    <th>Department</th>
                    <th>GPA</th>
                    <th>Campus</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var student in students)
                {
                    <tr>
                        <td>@student.Student_ID</td>
                        <td>
                            <strong>@student.First_Name @student.Last_Name</strong>
                            @if (!string.IsNullOrEmpty(student.Preferred_Primary_First_Name))
                            {
                                <br /><small class="text-muted">(@student.Preferred_Primary_First_Name)</small>
                            }
                        </td>
                        <td>@student.ASUrite</td>
                        <td><a href="mailto:@student.ASU_Email_Adress">@student.ASU_Email_Adress</a></td>
                        <td>@student.Acad_Prog_Descr</td>
                        <td>@student.Acad_Org</td>
                        <td>
                            <span class="badge @GetGpaBadgeClass(student.Cumulative_GPA)">
                                @student.Cumulative_GPA.ToString("F2")
                            </span>
                        </td>
                        <td>@student.Campus</td>
                        <td>
                            <span class="badge @GetStatusBadgeClass(student.Prog_Status)">
                                @student.Prog_Status
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-info" @onclick="() => ViewDetails(student.Student_ID)">
                                <span class="oi oi-eye"></span> View
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="mt-3">
        <p><strong>Total Students:</strong> @students.Count</p>
    </div>
}

@code {
    private List<StudentLookup> students = new();
    private string searchTerm = string.Empty;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadStudents();
    }

    private async Task LoadStudents()
    {
        loading = true;
        students = await StudentService.GetAllStudentsAsync();
        loading = false;
    }

    private async Task SearchStudents()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadStudents();
        }
        else
        {
            loading = true;
            students = await StudentService.SearchStudentsAsync(searchTerm);
            loading = false;
        }
    }

    private void ViewDetails(int studentId)
    {
        Navigation.NavigateTo($"/students/{studentId}");
    }

    private string GetGpaBadgeClass(double gpa)
    {
        return gpa >= 3.5 ? "bg-success" : gpa >= 3.0 ? "bg-primary" : gpa >= 2.5 ? "bg-warning" : "bg-danger";
    }

    private string GetStatusBadgeClass(string status)
    {
        return status == "AC" ? "bg-success" : "bg-secondary";
    }
}
