# Azure DevOps CI/CD Pipeline for Student System
# Demonstrates CI/CD with build, test, and deployment to Azure

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - StudentSystem.*/**

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildJob
    displayName: 'Build Solution'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET 8 SDK'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '$(solution)'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Run xUnit tests'
      inputs:
        command: 'test'
        projects: '**/*Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage" --logger trx'
        publishTestResults: true

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

    - task: DotNetCoreCLI@2
      displayName: 'Publish API'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/StudentSystem.API.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/api'
        zipAfterPublish: true

    - task: DotNetCoreCLI@2
      displayName: 'Publish Web'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '**/StudentSystem.Web.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/web'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: DeployDev
  displayName: 'Deploy to Development'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployAPI
    displayName: 'Deploy API to Azure App Service'
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy API to App Service'
            inputs:
              azureSubscription: '$(AzureSubscription)'
              appType: 'webApp'
              appName: '$(ApiAppServiceName)-dev'
              package: '$(Pipeline.Workspace)/drop/api/*.zip'
              deploymentMethod: 'zipDeploy'

- stage: DeployProd
  displayName: 'Deploy to Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployAPI
    displayName: 'Deploy API to Production'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy API to App Service'
            inputs:
              azureSubscription: '$(AzureSubscription)'
              appType: 'webApp'
              appName: '$(ApiAppServiceName)-prod'
              package: '$(Pipeline.Workspace)/drop/api/*.zip'
              deploymentMethod: 'zipDeploy'

          - task: AzureAppServiceSettings@1
            displayName: 'Configure App Settings'
            inputs:
              azureSubscription: '$(AzureSubscription)'
              appName: '$(ApiAppServiceName)-prod'
              resourceGroupName: '$(ResourceGroupName)'
              appSettings: |
                [
                  {
                    "name": "ApplicationInsights__ConnectionString",
                    "value": "$(AppInsightsConnectionString)",
                    "slotSetting": false
                  },
                  {
                    "name": "Azure__SignalR__ConnectionString",
                    "value": "$(SignalRConnectionString)",
                    "slotSetting": false
                  }
                ]
